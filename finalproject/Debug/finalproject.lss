
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ae4  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  00000b8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d9c  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002af  00000000  00000000  000019fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000938  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000140d  00000000  00000000  00002caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000040b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e0 c0       	rjmp	.+448    	; 0x1c2 <__ctors_end>
   2:	00 00       	nop
   4:	fb c0       	rjmp	.+502    	; 0x1fc <__bad_interrupt>
   6:	00 00       	nop
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__bad_interrupt>
   a:	00 00       	nop
   c:	f7 c0       	rjmp	.+494    	; 0x1fc <__bad_interrupt>
   e:	00 00       	nop
  10:	f5 c0       	rjmp	.+490    	; 0x1fc <__bad_interrupt>
  12:	00 00       	nop
  14:	f3 c0       	rjmp	.+486    	; 0x1fc <__bad_interrupt>
  16:	00 00       	nop
  18:	f1 c0       	rjmp	.+482    	; 0x1fc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ef c0       	rjmp	.+478    	; 0x1fc <__bad_interrupt>
  1e:	00 00       	nop
  20:	ed c0       	rjmp	.+474    	; 0x1fc <__bad_interrupt>
  22:	00 00       	nop
  24:	eb c0       	rjmp	.+470    	; 0x1fc <__bad_interrupt>
  26:	00 00       	nop
  28:	e9 c0       	rjmp	.+466    	; 0x1fc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__bad_interrupt>
  2e:	00 00       	nop
  30:	e5 c0       	rjmp	.+458    	; 0x1fc <__bad_interrupt>
  32:	00 00       	nop
  34:	08 c1       	rjmp	.+528    	; 0x246 <__vector_13>
  36:	00 00       	nop
  38:	e1 c0       	rjmp	.+450    	; 0x1fc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	df c0       	rjmp	.+446    	; 0x1fc <__bad_interrupt>
  3e:	00 00       	nop
  40:	dd c0       	rjmp	.+442    	; 0x1fc <__bad_interrupt>
  42:	00 00       	nop
  44:	db c0       	rjmp	.+438    	; 0x1fc <__bad_interrupt>
  46:	00 00       	nop
  48:	d9 c0       	rjmp	.+434    	; 0x1fc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d7 c0       	rjmp	.+430    	; 0x1fc <__bad_interrupt>
  4e:	00 00       	nop
  50:	d5 c0       	rjmp	.+426    	; 0x1fc <__bad_interrupt>
  52:	00 00       	nop
  54:	d3 c0       	rjmp	.+422    	; 0x1fc <__bad_interrupt>
  56:	00 00       	nop
  58:	d1 c0       	rjmp	.+418    	; 0x1fc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cf c0       	rjmp	.+414    	; 0x1fc <__bad_interrupt>
  5e:	00 00       	nop
  60:	cd c0       	rjmp	.+410    	; 0x1fc <__bad_interrupt>
  62:	00 00       	nop
  64:	cb c0       	rjmp	.+406    	; 0x1fc <__bad_interrupt>
  66:	00 00       	nop
  68:	c9 c0       	rjmp	.+402    	; 0x1fc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c7 c0       	rjmp	.+398    	; 0x1fc <__bad_interrupt>
  6e:	00 00       	nop
  70:	c5 c0       	rjmp	.+394    	; 0x1fc <__bad_interrupt>
  72:	00 00       	nop
  74:	c3 c0       	rjmp	.+390    	; 0x1fc <__bad_interrupt>
  76:	00 00       	nop
  78:	c1 c0       	rjmp	.+386    	; 0x1fc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bf c0       	rjmp	.+382    	; 0x1fc <__bad_interrupt>
  7e:	00 00       	nop
  80:	bd c0       	rjmp	.+378    	; 0x1fc <__bad_interrupt>
  82:	00 00       	nop
  84:	bb c0       	rjmp	.+374    	; 0x1fc <__bad_interrupt>
  86:	00 00       	nop
  88:	b9 c0       	rjmp	.+370    	; 0x1fc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c5 01       	movw	r24, r10
  8e:	c8 01       	movw	r24, r16
  90:	cb 01       	movw	r24, r22
  92:	ce 01       	movw	r24, r28
  94:	d1 01       	movw	r26, r2
  96:	d4 01       	movw	r26, r8
  98:	d7 01       	movw	r26, r14
  9a:	da 01       	movw	r26, r20
  9c:	dd 01       	movw	r26, r26
  9e:	e0 01       	movw	r28, r0
  a0:	e3 01       	movw	r28, r6
  a2:	e6 01       	movw	r28, r12
  a4:	e9 01       	movw	r28, r18
  a6:	ec 01       	movw	r28, r24
  a8:	ef 01       	movw	r28, r30
  aa:	f2 01       	movw	r30, r4
  ac:	f5 01       	movw	r30, r10
  ae:	f8 01       	movw	r30, r16
  b0:	fb 01       	movw	r30, r22
  b2:	fe 01       	movw	r30, r28
  b4:	01 02       	muls	r16, r17
  b6:	04 02       	muls	r16, r20
  b8:	07 02       	muls	r16, r23
  ba:	0a 02       	muls	r16, r26
  bc:	0d 02       	muls	r16, r29
  be:	10 02       	muls	r17, r16
  c0:	13 02       	muls	r17, r19
  c2:	16 02       	muls	r17, r22
  c4:	19 02       	muls	r17, r25
  c6:	1c 02       	muls	r17, r28
  c8:	1f 02       	muls	r17, r31
  ca:	22 02       	muls	r18, r18
  cc:	25 02       	muls	r18, r21
  ce:	28 02       	muls	r18, r24
  d0:	2b 02       	muls	r18, r27
  d2:	2e 02       	muls	r18, r30
  d4:	31 02       	muls	r19, r17
  d6:	34 02       	muls	r19, r20
  d8:	37 02       	muls	r19, r23
  da:	3a 02       	muls	r19, r26
  dc:	3d 02       	muls	r19, r29
  de:	40 02       	muls	r20, r16
  e0:	43 02       	muls	r20, r19
  e2:	46 02       	muls	r20, r22
  e4:	49 02       	muls	r20, r25
  e6:	4c 02       	muls	r20, r28
  e8:	4f 02       	muls	r20, r31
  ea:	52 02       	muls	r21, r18
  ec:	55 02       	muls	r21, r21
  ee:	58 02       	muls	r21, r24
  f0:	5b 02       	muls	r21, r27

000000f2 <__trampolines_end>:
  f2:	04 04       	cpc	r0, r4
  f4:	0e 1f       	adc	r16, r30
  f6:	1f 1f       	adc	r17, r31
  f8:	0e 04       	cpc	r0, r14

000000fa <LINE>:
  fa:	04 04 04 04 04 04 04 04                             ........

00000102 <Sinewave>:
 102:	00 03 06 09 0c 0f 12 15 18 1c 1f 22 25 28 2b 2e     ..........."%(+.
 112:	30 33 36 39 3c 3f 41 44 47 49 4c 4e 51 53 55 58     0369<?ADGILNQSUX
 122:	5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 75     Z\^`bdfhjlmoprsu
 132:	76 77 78 79 7a 7b 7c 7c 7d 7e 7e 7f 7f 7f 7f 7f     vwxyz{||}~~.....
 142:	7f 7f 7f 7f 7f 7f 7e 7e 7d 7c 7c 7b 7a 79 78 77     ......~~}||{zyxw
 152:	76 75 73 72 70 6f 6d 6c 6a 68 66 64 62 60 5e 5c     vusrpomljhfdb`^\
 162:	5a 58 55 53 51 4e 4c 49 47 44 41 3f 3c 39 36 33     ZXUSQNLIGDA?<963
 172:	30 2e 2b 28 25 22 1f 1c 18 15 12 0f 0c 09 06 03     0.+(%"..........
 182:	00 fd fa f7 f4 f1 ee eb e8 e4 e1 de db d8 d5 d2     ................
 192:	d0 cd ca c7 c4 c1 bf bc b9 b7 b4 b2 af ad ab a8     ................
 1a2:	a6 a4 a2 a0 9e 9c 9a 98 96 94 93 91 90 8e 8d 8b     ................
 1b2:	8a 89 88 87 86 85 84 84 83 82 82 81 81 81 81 81     ................

000001c2 <__ctors_end>:
 1c2:	11 24       	eor	r1, r1
 1c4:	1f be       	out	0x3f, r1	; 63
 1c6:	cf ef       	ldi	r28, 0xFF	; 255
 1c8:	d0 e4       	ldi	r29, 0x40	; 64
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	cd bf       	out	0x3d, r28	; 61

000001ce <__do_copy_data>:
 1ce:	11 e0       	ldi	r17, 0x01	; 1
 1d0:	a0 e0       	ldi	r26, 0x00	; 0
 1d2:	b1 e0       	ldi	r27, 0x01	; 1
 1d4:	e4 ee       	ldi	r30, 0xE4	; 228
 1d6:	fa e0       	ldi	r31, 0x0A	; 10
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	0b bf       	out	0x3b, r16	; 59
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x14>
 1de:	07 90       	elpm	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	a2 31       	cpi	r26, 0x12	; 18
 1e4:	b1 07       	cpc	r27, r17
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0x10>

000001e8 <__do_clear_bss>:
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	a2 e1       	ldi	r26, 0x12	; 18
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
 1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
 1f2:	a7 31       	cpi	r26, 0x17	; 23
 1f4:	b2 07       	cpc	r27, r18
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
 1f8:	c4 d3       	rcall	.+1928   	; 0x982 <main>
 1fa:	72 c4       	rjmp	.+2276   	; 0xae0 <_exit>

000001fc <__bad_interrupt>:
 1fc:	01 cf       	rjmp	.-510    	; 0x0 <__vectors>

000001fe <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1fe:	8b e0       	ldi	r24, 0x0B	; 11
 200:	80 93 81 00 	sts	0x0081, r24
 204:	8d e7       	ldi	r24, 0x7D	; 125
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 89 00 	sts	0x0089, r25
 20c:	80 93 88 00 	sts	0x0088, r24
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 6f 00 	sts	0x006F, r24
 216:	10 92 85 00 	sts	0x0085, r1
 21a:	10 92 84 00 	sts	0x0084, r1
 21e:	80 91 00 01 	lds	r24, 0x0100
 222:	90 91 01 01 	lds	r25, 0x0101
 226:	a0 91 02 01 	lds	r26, 0x0102
 22a:	b0 91 03 01 	lds	r27, 0x0103
 22e:	80 93 12 01 	sts	0x0112, r24
 232:	90 93 13 01 	sts	0x0113, r25
 236:	a0 93 14 01 	sts	0x0114, r26
 23a:	b0 93 15 01 	sts	0x0115, r27
 23e:	8f b7       	in	r24, 0x3f	; 63
 240:	80 68       	ori	r24, 0x80	; 128
 242:	8f bf       	out	0x3f, r24	; 63
 244:	08 95       	ret

00000246 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 258:	80 91 12 01 	lds	r24, 0x0112
 25c:	90 91 13 01 	lds	r25, 0x0113
 260:	a0 91 14 01 	lds	r26, 0x0114
 264:	b0 91 15 01 	lds	r27, 0x0115
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	a1 09       	sbc	r26, r1
 26c:	b1 09       	sbc	r27, r1
 26e:	80 93 12 01 	sts	0x0112, r24
 272:	90 93 13 01 	sts	0x0113, r25
 276:	a0 93 14 01 	sts	0x0114, r26
 27a:	b0 93 15 01 	sts	0x0115, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 27e:	89 2b       	or	r24, r25
 280:	8a 2b       	or	r24, r26
 282:	8b 2b       	or	r24, r27
 284:	99 f4       	brne	.+38     	; 0x2ac <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 16 01 	sts	0x0116, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 28c:	80 91 00 01 	lds	r24, 0x0100
 290:	90 91 01 01 	lds	r25, 0x0101
 294:	a0 91 02 01 	lds	r26, 0x0102
 298:	b0 91 03 01 	lds	r27, 0x0103
 29c:	80 93 12 01 	sts	0x0112, r24
 2a0:	90 93 13 01 	sts	0x0113, r25
 2a4:	a0 93 14 01 	sts	0x0114, r26
 2a8:	b0 93 15 01 	sts	0x0115, r27
	}
}
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 2be:	18 16       	cp	r1, r24
 2c0:	19 06       	cpc	r1, r25
 2c2:	9c f4       	brge	.+38     	; 0x2ea <delay_ms+0x2c>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 2c8:	77 e0       	ldi	r23, 0x07	; 7
 2ca:	63 e0       	ldi	r22, 0x03	; 3
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <delay_ms+0x26>
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  {
   asm("nop");
 2ce:	00 00       	nop
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 2d4:	21 15       	cp	r18, r1
 2d6:	31 05       	cpc	r19, r1
 2d8:	d1 f7       	brne	.-12     	; 0x2ce <delay_ms+0x10>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	48 17       	cp	r20, r24
 2e0:	59 07       	cpc	r21, r25
 2e2:	19 f0       	breq	.+6      	; 0x2ea <delay_ms+0x2c>
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 2e4:	27 2f       	mov	r18, r23
 2e6:	36 2f       	mov	r19, r22
 2e8:	f2 cf       	rjmp	.-28     	; 0x2ce <delay_ms+0x10>
 2ea:	08 95       	ret

000002ec <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 2ec:	28 98       	cbi	0x05, 0	; 5
   DATA_BUS = Command;
 2ee:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 2f0:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 2f2:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 2f4:	29 98       	cbi	0x05, 1	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	e1 cf       	rjmp	.-62     	; 0x2be <delay_ms>
 2fc:	08 95       	ret

000002fe <LCD_ClearScreen>:
#define E 1		// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	f5 cf       	rjmp	.-22     	; 0x2ec <LCD_WriteCommand>
 302:	08 95       	ret

00000304 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 304:	81 31       	cpi	r24, 0x11	; 17
 306:	18 f4       	brcc	.+6      	; 0x30e <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 308:	81 58       	subi	r24, 0x81	; 129
 30a:	f0 cf       	rjmp	.-32     	; 0x2ec <LCD_WriteCommand>
 30c:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 30e:	81 55       	subi	r24, 0x51	; 81
 310:	ed cf       	rjmp	.-38     	; 0x2ec <LCD_WriteCommand>
 312:	08 95       	ret

00000314 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 314:	84 e6       	ldi	r24, 0x64	; 100
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	d2 df       	rcall	.-92     	; 0x2be <delay_ms>
	LCD_WriteCommand(0x38);
 31a:	88 e3       	ldi	r24, 0x38	; 56
 31c:	e7 df       	rcall	.-50     	; 0x2ec <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	e5 df       	rcall	.-54     	; 0x2ec <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 322:	8f e0       	ldi	r24, 0x0F	; 15
 324:	e3 df       	rcall	.-58     	; 0x2ec <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	e1 df       	rcall	.-62     	; 0x2ec <LCD_WriteCommand>
	delay_ms(10);						 
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	c7 cf       	rjmp	.-114    	; 0x2be <delay_ms>
 330:	08 95       	ret

00000332 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 332:	28 9a       	sbi	0x05, 0	; 5
   DATA_BUS = Data;
 334:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 336:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 338:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 33a:	29 98       	cbi	0x05, 1	; 5
   delay_ms(1);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	be cf       	rjmp	.-132    	; 0x2be <delay_ms>
 342:	08 95       	ret

00000344 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	18 2f       	mov	r17, r24
 34e:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 350:	d6 df       	rcall	.-84     	; 0x2fe <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 352:	88 81       	ld	r24, Y
 354:	88 23       	and	r24, r24
 356:	59 f0       	breq	.+22     	; 0x36e <LCD_DisplayString+0x2a>
      LCD_Cursor(c++);
 358:	01 e0       	ldi	r16, 0x01	; 1
 35a:	01 0f       	add	r16, r17
 35c:	81 2f       	mov	r24, r17
 35e:	d2 df       	rcall	.-92     	; 0x304 <LCD_Cursor>
      LCD_WriteData(*string++);
 360:	89 91       	ld	r24, Y+
 362:	e7 df       	rcall	.-50     	; 0x332 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 364:	88 81       	ld	r24, Y
 366:	88 23       	and	r24, r24
 368:	11 f0       	breq	.+4      	; 0x36e <LCD_DisplayString+0x2a>
      LCD_Cursor(c++);
 36a:	10 2f       	mov	r17, r16
 36c:	f5 cf       	rjmp	.-22     	; 0x358 <LCD_DisplayString+0x14>
      LCD_WriteData(*string++);
   }
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <Write7Seg>:
	// Turns on all segments
	// *sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
	//					(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) |	(1<<sevenSeg_DP);	
	
	// Seven Seg character defintions
	switch (c) {
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	83 33       	cpi	r24, 0x33	; 51
 37c:	91 05       	cpc	r25, r1
 37e:	08 f0       	brcs	.+2      	; 0x382 <Write7Seg+0xa>
 380:	9d c0       	rjmp	.+314    	; 0x4bc <Write7Seg+0x144>
 382:	fc 01       	movw	r30, r24
 384:	ea 5b       	subi	r30, 0xBA	; 186
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	a5 c3       	rjmp	.+1866   	; 0xad4 <__tablejump2__>
		case SS_0:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 38a:	8e e7       	ldi	r24, 0x7E	; 126
 38c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F)	;
			break;
 38e:	08 95       	ret
		case SS_1:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) ;
 390:	82 e1       	ldi	r24, 0x12	; 18
 392:	88 b9       	out	0x08, r24	; 8
			break;
 394:	08 95       	ret
		case SS_2:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_D) |	
 396:	8c eb       	ldi	r24, 0xBC	; 188
 398:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 39a:	08 95       	ret
		case SS_3:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 39c:	86 eb       	ldi	r24, 0xB6	; 182
 39e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 3a0:	08 95       	ret
		case SS_4:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C)	|	
 3a2:	82 ed       	ldi	r24, 0xD2	; 210
 3a4:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3a6:	08 95       	ret
		case SS_5:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3a8:	86 ee       	ldi	r24, 0xE6	; 230
 3aa:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3ac:	08 95       	ret
		case SS_6:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3ae:	8e ee       	ldi	r24, 0xEE	; 238
 3b0:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3b2:	08 95       	ret
		case SS_7:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) ;
 3b4:	82 e3       	ldi	r24, 0x32	; 50
 3b6:	88 b9       	out	0x08, r24	; 8
			break;
 3b8:	08 95       	ret
		case SS_8:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3ba:	8e ef       	ldi	r24, 0xFE	; 254
 3bc:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3be:	08 95       	ret
		case SS_9:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3c0:	86 ef       	ldi	r24, 0xF6	; 246
 3c2:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3c4:	08 95       	ret
		case SS_A:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 3c6:	8a ef       	ldi	r24, 0xFA	; 250
 3c8:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3ca:	08 95       	ret
		case SS_B:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3cc:	8e ec       	ldi	r24, 0xCE	; 206
 3ce:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3d0:	08 95       	ret
		case SS_C:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 3d2:	8c e6       	ldi	r24, 0x6C	; 108
 3d4:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 3d6:	08 95       	ret
		case SS_D:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3d8:	8e e9       	ldi	r24, 0x9E	; 158
 3da:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 3dc:	08 95       	ret
		case SS_E:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 3de:	8c ee       	ldi	r24, 0xEC	; 236
 3e0:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3e2:	08 95       	ret
		case SS_F:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 3e4:	88 ee       	ldi	r24, 0xE8	; 232
 3e6:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3e8:	08 95       	ret
		case SS_DP:
			*sevenSeg_Port =	(1<<sevenSeg_DP);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	88 b9       	out	0x08, r24	; 8
			break;
 3ee:	08 95       	ret
		case SS_G:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 3f0:	8e e6       	ldi	r24, 0x6E	; 110
 3f2:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 3f4:	08 95       	ret
		case SS_H:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 3f6:	8a ed       	ldi	r24, 0xDA	; 218
 3f8:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 3fa:	08 95       	ret
		case SS_h:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 3fc:	8a ec       	ldi	r24, 0xCA	; 202
 3fe:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 400:	08 95       	ret
		case SS_I:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
 402:	88 e4       	ldi	r24, 0x48	; 72
 404:	88 b9       	out	0x08, r24	; 8
			break;
 406:	08 95       	ret
		case SS_J:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 408:	8e e1       	ldi	r24, 0x1E	; 30
 40a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 40c:	08 95       	ret
		case SS_L:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 40e:	8c e4       	ldi	r24, 0x4C	; 76
 410:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 412:	08 95       	ret
		case SS_m:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |
 414:	8a ea       	ldi	r24, 0xAA	; 170
 416:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 418:	08 95       	ret
		case SS_N:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 41a:	8a e7       	ldi	r24, 0x7A	; 122
 41c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 41e:	08 95       	ret
		case SS_n:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 420:	8a e8       	ldi	r24, 0x8A	; 138
 422:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 424:	08 95       	ret
		case SS_P:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |
 426:	88 ef       	ldi	r24, 0xF8	; 248
 428:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 42a:	08 95       	ret
		case SS_R:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 42c:	88 e6       	ldi	r24, 0x68	; 104
 42e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 430:	08 95       	ret
		case SS_r:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
 432:	88 e8       	ldi	r24, 0x88	; 136
 434:	88 b9       	out	0x08, r24	; 8
			break;
 436:	08 95       	ret
		case SS_t:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 438:	8c ec       	ldi	r24, 0xCC	; 204
 43a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 43c:	08 95       	ret
		case SS_U:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 43e:	8e e5       	ldi	r24, 0x5E	; 94
 440:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 442:	08 95       	ret
		case SS_u:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 444:	8e e0       	ldi	r24, 0x0E	; 14
 446:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 448:	08 95       	ret
		case SS_V:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_D) |
 44a:	84 e5       	ldi	r24, 0x54	; 84
 44c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;
 44e:	08 95       	ret
		case SS_v:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 450:	80 ed       	ldi	r24, 0xD0	; 208
 452:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 454:	08 95       	ret
		case SS_X:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 456:	84 ea       	ldi	r24, 0xA4	; 164
 458:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 45a:	08 95       	ret
		case SS_Y:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 45c:	86 ed       	ldi	r24, 0xD6	; 214
 45e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 460:	08 95       	ret
		case SS_Z:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 462:	88 e9       	ldi	r24, 0x98	; 152
 464:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 466:	08 95       	ret
		case SS_lambda:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 468:	8a eb       	ldi	r24, 0xBA	; 186
 46a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 46c:	08 95       	ret
		case SS_char1:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
 46e:	88 ec       	ldi	r24, 0xC8	; 200
 470:	88 b9       	out	0x08, r24	; 8
			break;
 472:	08 95       	ret
		case SS_char2:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 474:	82 e9       	ldi	r24, 0x92	; 146
 476:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 478:	08 95       	ret
		case SS_char3:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 47a:	8a e5       	ldi	r24, 0x5A	; 90
 47c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 47e:	08 95       	ret
		case SS_char4:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 480:	80 e5       	ldi	r24, 0x50	; 80
 482:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;
 484:	08 95       	ret
		case SS_char5:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 48a:	08 95       	ret
		case SS_char6:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) ;
 48c:	84 e2       	ldi	r24, 0x24	; 36
 48e:	88 b9       	out	0x08, r24	; 8
			break;
 490:	08 95       	ret
		case SS_char7:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 492:	82 ec       	ldi	r24, 0xC2	; 194
 494:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 496:	08 95       	ret
		case SS_char8:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 498:	82 e4       	ldi	r24, 0x42	; 66
 49a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;	
 49c:	08 95       	ret
		case SS_char9:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 49e:	88 e1       	ldi	r24, 0x18	; 24
 4a0:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;	
			break;	
 4a2:	08 95       	ret
		case SS_char10:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 4a4:	80 ee       	ldi	r24, 0xE0	; 224
 4a6:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;	
 4a8:	08 95       	ret
		case SS_char11:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 4aa:	8c e8       	ldi	r24, 0x8C	; 140
 4ac:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;	
 4ae:	08 95       	ret
		case SS_char12:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 4b0:	86 e8       	ldi	r24, 0x86	; 134
 4b2:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;	
 4b4:	08 95       	ret
		case SS_char13:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	
 4b6:	80 eb       	ldi	r24, 0xB0	; 176
 4b8:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;	
 4ba:	08 95       	ret
	
		default:
			*sevenSeg_Port =	(1<<sevenSeg_G) ;
 4bc:	80 e8       	ldi	r24, 0x80	; 128
 4be:	88 b9       	out	0x08, r24	; 8
 4c0:	08 95       	ret

000004c2 <fix_fft>:
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
{
 4c2:	2f 92       	push	r2
 4c4:	3f 92       	push	r3
 4c6:	4f 92       	push	r4
 4c8:	5f 92       	push	r5
 4ca:	6f 92       	push	r6
 4cc:	7f 92       	push	r7
 4ce:	8f 92       	push	r8
 4d0:	9f 92       	push	r9
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	a2 97       	sbiw	r28, 0x22	; 34
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	9a 8b       	std	Y+18, r25	; 0x12
 4f8:	89 8b       	std	Y+17, r24	; 0x11
 4fa:	7c 8b       	std	Y+20, r23	; 0x14
 4fc:	6b 8b       	std	Y+19, r22	; 0x13
 4fe:	38 8b       	std	Y+16, r19	; 0x10
 500:	2f 87       	std	Y+15, r18	; 0x0f
    int mr, nn, i, j, l, k, istep, n, scale, shift;
    char qr, qi, tr, ti, wr, wi;

    n = 1 << m;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9c 01       	movw	r18, r24
 508:	02 c0       	rjmp	.+4      	; 0x50e <fix_fft+0x4c>
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	4a 95       	dec	r20
 510:	e2 f7       	brpl	.-8      	; 0x50a <fix_fft+0x48>
 512:	3c 83       	std	Y+4, r19	; 0x04
 514:	2b 83       	std	Y+3, r18	; 0x03

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
 516:	21 30       	cpi	r18, 0x01	; 1
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	34 07       	cpc	r19, r20
 51c:	0c f0       	brlt	.+2      	; 0x520 <fix_fft+0x5e>
 51e:	9c c1       	rjmp	.+824    	; 0x858 <fix_fft+0x396>
	  return -1;

    mr = 0;
    nn = n - 1;
 520:	b9 01       	movw	r22, r18
 522:	61 50       	subi	r22, 0x01	; 1
 524:	71 09       	sbc	r23, r1
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
 526:	16 16       	cp	r1, r22
 528:	17 06       	cpc	r1, r23
 52a:	0c f0       	brlt	.+2      	; 0x52e <fix_fft+0x6c>
 52c:	46 c0       	rjmp	.+140    	; 0x5ba <fix_fft+0xf8>
 52e:	a9 88       	ldd	r10, Y+17	; 0x11
 530:	ba 88       	ldd	r11, Y+18	; 0x12
 532:	5f ef       	ldi	r21, 0xFF	; 255
 534:	a5 1a       	sub	r10, r21
 536:	b5 0a       	sbc	r11, r21
 538:	ab 89       	ldd	r26, Y+19	; 0x13
 53a:	bc 89       	ldd	r27, Y+20	; 0x14
 53c:	11 96       	adiw	r26, 0x01	; 1

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
	  return -1;

    mr = 0;
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	50 e0       	ldi	r21, 0x00	; 0
    nn = n - 1;
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
 542:	0b 81       	ldd	r16, Y+3	; 0x03
 544:	1c 81       	ldd	r17, Y+4	; 0x04
 546:	fc 01       	movw	r30, r24
 548:	4d 01       	movw	r8, r26
 54a:	e9 88       	ldd	r14, Y+17	; 0x11
 54c:	fa 88       	ldd	r15, Y+18	; 0x12
 54e:	cb 88       	ldd	r12, Y+19	; 0x13
 550:	dc 88       	ldd	r13, Y+20	; 0x14
 552:	80 2f       	mov	r24, r16
 554:	91 2f       	mov	r25, r17
	  l = n;
	  do {
		l >>= 1;
 556:	95 95       	asr	r25
 558:	87 95       	ror	r24
	  } while (mr+l > nn);
 55a:	9a 01       	movw	r18, r20
 55c:	28 0f       	add	r18, r24
 55e:	39 1f       	adc	r19, r25
 560:	62 17       	cp	r22, r18
 562:	73 07       	cpc	r23, r19
 564:	c4 f3       	brlt	.-16     	; 0x556 <fix_fft+0x94>
	  mr = (mr & (l-1)) + l;
 566:	9c 01       	movw	r18, r24
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	31 09       	sbc	r19, r1
 56c:	42 23       	and	r20, r18
 56e:	53 23       	and	r21, r19
 570:	48 0f       	add	r20, r24
 572:	59 1f       	adc	r21, r25

	  if (mr <= m)
 574:	e4 17       	cp	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	b4 f4       	brge	.+44     	; 0x5a6 <fix_fft+0xe4>
		continue;
	  tr = fr[m];
 57a:	d5 01       	movw	r26, r10
 57c:	2c 91       	ld	r18, X
	  fr[m] = fr[mr];
 57e:	c7 01       	movw	r24, r14
 580:	84 0f       	add	r24, r20
 582:	95 1f       	adc	r25, r21
 584:	dc 01       	movw	r26, r24
 586:	3c 91       	ld	r19, X
 588:	d5 01       	movw	r26, r10
 58a:	3c 93       	st	X, r19
	  fr[mr] = tr;
 58c:	dc 01       	movw	r26, r24
 58e:	2c 93       	st	X, r18
	  ti = fi[m];
 590:	d4 01       	movw	r26, r8
 592:	2c 91       	ld	r18, X
	  fi[m] = fi[mr];
 594:	c6 01       	movw	r24, r12
 596:	84 0f       	add	r24, r20
 598:	95 1f       	adc	r25, r21
 59a:	dc 01       	movw	r26, r24
 59c:	3c 91       	ld	r19, X
 59e:	d4 01       	movw	r26, r8
 5a0:	3c 93       	st	X, r19
	  fi[mr] = ti;
 5a2:	dc 01       	movw	r26, r24
 5a4:	2c 93       	st	X, r18
    mr = 0;
    nn = n - 1;
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
 5a6:	31 96       	adiw	r30, 0x01	; 1
 5a8:	bf ef       	ldi	r27, 0xFF	; 255
 5aa:	ab 1a       	sub	r10, r27
 5ac:	bb 0a       	sbc	r11, r27
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	82 1a       	sub	r8, r18
 5b2:	92 0a       	sbc	r9, r18
 5b4:	6e 17       	cp	r22, r30
 5b6:	7f 07       	cpc	r23, r31
 5b8:	64 f6       	brge	.-104    	; 0x552 <fix_fft+0x90>
	  fi[mr] = ti;
    }

    l = 1;
    k = LOG2_N_WAVE-1;
    while (l < n) {
 5ba:	4b 81       	ldd	r20, Y+3	; 0x03
 5bc:	5c 81       	ldd	r21, Y+4	; 0x04
 5be:	42 30       	cpi	r20, 0x02	; 2
 5c0:	51 05       	cpc	r21, r1
 5c2:	0c f4       	brge	.+2      	; 0x5c6 <fix_fft+0x104>
 5c4:	4c c1       	rjmp	.+664    	; 0x85e <fix_fft+0x39c>
 5c6:	67 e0       	ldi	r22, 0x07	; 7
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	7e 87       	std	Y+14, r23	; 0x0e
 5cc:	6d 87       	std	Y+13, r22	; 0x0d
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	9c 87       	std	Y+12, r25	; 0x0c
 5d4:	8b 87       	std	Y+11, r24	; 0x0b
 5d6:	a9 89       	ldd	r26, Y+17	; 0x11
 5d8:	ba 89       	ldd	r27, Y+18	; 0x12
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	ba 8f       	std	Y+26, r27	; 0x1a
 5de:	a9 8f       	std	Y+25, r26	; 0x19
 5e0:	6b 89       	ldd	r22, Y+19	; 0x13
 5e2:	7c 89       	ldd	r23, Y+20	; 0x14
 5e4:	6f 5f       	subi	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	7c 8f       	std	Y+28, r23	; 0x1c
 5ea:	6b 8f       	std	Y+27, r22	; 0x1b
 5ec:	89 89       	ldd	r24, Y+17	; 0x11
 5ee:	9a 89       	ldd	r25, Y+18	; 0x12
 5f0:	84 0f       	add	r24, r20
 5f2:	95 1f       	adc	r25, r21
 5f4:	9e 8f       	std	Y+30, r25	; 0x1e
 5f6:	8d 8f       	std	Y+29, r24	; 0x1d
	  if (inverse) {
 5f8:	af 85       	ldd	r26, Y+15	; 0x0f
 5fa:	b8 89       	ldd	r27, Y+16	; 0x10
 5fc:	ab 2b       	or	r26, r27
 5fe:	89 f0       	breq	.+34     	; 0x622 <fix_fft+0x160>
		/* variable scaling, depending upon data */
		shift = 0;
		for (i=0; i<n; ++i) {
 600:	2b 81       	ldd	r18, Y+3	; 0x03
 602:	3c 81       	ldd	r19, Y+4	; 0x04
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	84 f4       	brge	.+32     	; 0x62a <fix_fft+0x168>
 60a:	89 8d       	ldd	r24, Y+25	; 0x19
 60c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 60e:	eb 8d       	ldd	r30, Y+27	; 0x1b
 610:	fc 8d       	ldd	r31, Y+28	; 0x1c
 612:	2d 8d       	ldd	r18, Y+29	; 0x1d
 614:	3e 8d       	ldd	r19, Y+30	; 0x1e
 616:	01 96       	adiw	r24, 0x01	; 1
		    j = fr[i];
		    if (j < 0)
			  j = -j;
		    m = fi[i];
 618:	41 91       	ld	r20, Z+
    k = LOG2_N_WAVE-1;
    while (l < n) {
	  if (inverse) {
		/* variable scaling, depending upon data */
		shift = 0;
		for (i=0; i<n; ++i) {
 61a:	82 17       	cp	r24, r18
 61c:	93 07       	cpc	r25, r19
 61e:	d9 f7       	brne	.-10     	; 0x616 <fix_fft+0x154>
 620:	07 c0       	rjmp	.+14     	; 0x630 <fix_fft+0x16e>
		  fixed scaling, for proper normalization --
		  there will be log2(n) passes, so this results
		  in an overall factor of 1/n, distributed to
		  maximize arithmetic accuracy.
		*/
		shift = 1;
 622:	31 e0       	ldi	r19, 0x01	; 1
 624:	3d 83       	std	Y+5, r19	; 0x05
 626:	1e 82       	std	Y+6, r1	; 0x06
 628:	05 c0       	rjmp	.+10     	; 0x634 <fix_fft+0x172>
    k = LOG2_N_WAVE-1;
    while (l < n) {
	  if (inverse) {
		/* variable scaling, depending upon data */
		shift = 0;
		for (i=0; i<n; ++i) {
 62a:	1d 82       	std	Y+5, r1	; 0x05
 62c:	1e 82       	std	Y+6, r1	; 0x06
 62e:	02 c0       	rjmp	.+4      	; 0x634 <fix_fft+0x172>
 630:	1d 82       	std	Y+5, r1	; 0x05
 632:	1e 82       	std	Y+6, r1	; 0x06
	  /*
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
 634:	4b 85       	ldd	r20, Y+11	; 0x0b
 636:	5c 85       	ldd	r21, Y+12	; 0x0c
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	58 87       	std	Y+8, r21	; 0x08
 63e:	4f 83       	std	Y+7, r20	; 0x07
	  for (m=0; m<l; ++m) {
 640:	6b 85       	ldd	r22, Y+11	; 0x0b
 642:	7c 85       	ldd	r23, Y+12	; 0x0c
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	0c f0       	brlt	.+2      	; 0x64c <fix_fft+0x18a>
 64a:	f7 c0       	rjmp	.+494    	; 0x83a <fix_fft+0x378>
 64c:	19 86       	std	Y+9, r1	; 0x09
 64e:	1a 86       	std	Y+10, r1	; 0x0a
 650:	1a 01       	movw	r2, r20
 652:	89 89       	ldd	r24, Y+17	; 0x11
 654:	9a 89       	ldd	r25, Y+18	; 0x12
 656:	68 0f       	add	r22, r24
 658:	79 1f       	adc	r23, r25
 65a:	7e 8b       	std	Y+22, r23	; 0x16
 65c:	6d 8b       	std	Y+21, r22	; 0x15
 65e:	ab 89       	ldd	r26, Y+19	; 0x13
 660:	bc 89       	ldd	r27, Y+20	; 0x14
 662:	2b 85       	ldd	r18, Y+11	; 0x0b
 664:	3c 85       	ldd	r19, Y+12	; 0x0c
 666:	a2 0f       	add	r26, r18
 668:	b3 1f       	adc	r27, r19
 66a:	b8 8f       	std	Y+24, r27	; 0x18
 66c:	af 8b       	std	Y+23, r26	; 0x17
		j = m << k;
 66e:	29 85       	ldd	r18, Y+9	; 0x09
 670:	3a 85       	ldd	r19, Y+10	; 0x0a
 672:	0d 84       	ldd	r0, Y+13	; 0x0d
 674:	02 c0       	rjmp	.+4      	; 0x67a <fix_fft+0x1b8>
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	0a 94       	dec	r0
 67c:	e2 f7       	brpl	.-8      	; 0x676 <fix_fft+0x1b4>
		/* 0 <= j < N_WAVE/2 */
		wr =  pgm_read_word_near(Sinewave + j+N_WAVE/4);
 67e:	f9 01       	movw	r30, r18
 680:	ee 5b       	subi	r30, 0xBE	; 190
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	85 91       	lpm	r24, Z+
 686:	94 91       	lpm	r25, Z
 688:	48 2f       	mov	r20, r24


		wi = -pgm_read_word_near(Sinewave + j);
 68a:	2e 5f       	subi	r18, 0xFE	; 254
 68c:	3e 4f       	sbci	r19, 0xFE	; 254
 68e:	f9 01       	movw	r30, r18
 690:	25 91       	lpm	r18, Z+
 692:	34 91       	lpm	r19, Z
 694:	42 2e       	mov	r4, r18
		if (inverse)
 696:	6f 85       	ldd	r22, Y+15	; 0x0f
 698:	78 89       	ldd	r23, Y+16	; 0x10
 69a:	67 2b       	or	r22, r23
 69c:	09 f4       	brne	.+2      	; 0x6a0 <fix_fft+0x1de>
		j = m << k;
		/* 0 <= j < N_WAVE/2 */
		wr =  pgm_read_word_near(Sinewave + j+N_WAVE/4);


		wi = -pgm_read_word_near(Sinewave + j);
 69e:	41 94       	neg	r4
		if (inverse)
		    wi = -wi;
		if (shift) {
 6a0:	ad 81       	ldd	r26, Y+5	; 0x05
 6a2:	be 81       	ldd	r27, Y+6	; 0x06
 6a4:	ab 2b       	or	r26, r27
 6a6:	19 f0       	breq	.+6      	; 0x6ae <fix_fft+0x1ec>
		    wr >>= 1;
 6a8:	48 2f       	mov	r20, r24
 6aa:	46 95       	lsr	r20
		    wi >>= 1;
 6ac:	46 94       	lsr	r4
		}
		for (i=m; i<n; i+=istep) {
 6ae:	2b 81       	ldd	r18, Y+3	; 0x03
 6b0:	3c 81       	ldd	r19, Y+4	; 0x04
 6b2:	69 85       	ldd	r22, Y+9	; 0x09
 6b4:	7a 85       	ldd	r23, Y+10	; 0x0a
 6b6:	62 17       	cp	r22, r18
 6b8:	73 07       	cpc	r23, r19
 6ba:	0c f0       	brlt	.+2      	; 0x6be <fix_fft+0x1fc>
 6bc:	b2 c0       	rjmp	.+356    	; 0x822 <fix_fft+0x360>
 6be:	6b 89       	ldd	r22, Y+19	; 0x13
 6c0:	7c 89       	ldd	r23, Y+20	; 0x14
 6c2:	89 85       	ldd	r24, Y+9	; 0x09
 6c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c6:	68 0f       	add	r22, r24
 6c8:	79 1f       	adc	r23, r25
 6ca:	29 89       	ldd	r18, Y+17	; 0x11
 6cc:	3a 89       	ldd	r19, Y+18	; 0x12
 6ce:	28 0f       	add	r18, r24
 6d0:	39 1f       	adc	r19, r25
 6d2:	fc 01       	movw	r30, r24
 6d4:	af 89       	ldd	r26, Y+23	; 0x17
 6d6:	b8 8d       	ldd	r27, Y+24	; 0x18
 6d8:	ea 0f       	add	r30, r26
 6da:	fb 1f       	adc	r31, r27
 6dc:	ad 88       	ldd	r10, Y+21	; 0x15
 6de:	be 88       	ldd	r11, Y+22	; 0x16
 6e0:	a8 0e       	add	r10, r24
 6e2:	b9 1e       	adc	r11, r25
 6e4:	3c 01       	movw	r6, r24
*/
inline char FIX_MPY(char a, char b)
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
 6e6:	04 2f       	mov	r16, r20
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	51 2c       	mov	r5, r1
 6ec:	d9 01       	movw	r26, r18
 6ee:	cb 01       	movw	r24, r22
 6f0:	fa a3       	std	Y+34, r31	; 0x22
 6f2:	e9 a3       	std	Y+33, r30	; 0x21
 6f4:	b8 a2       	std	Y+32, r11	; 0x20
 6f6:	af 8e       	std	Y+31, r10	; 0x1f
 6f8:	68 01       	movw	r12, r16
 6fa:	8f 8c       	ldd	r8, Y+31	; 0x1f
 6fc:	98 a0       	ldd	r9, Y+32	; 0x20
 6fe:	f4 01       	movw	r30, r8
 700:	20 81       	ld	r18, Z
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	c2 9e       	mul	r12, r18
 706:	80 01       	movw	r16, r0
 708:	c3 9e       	mul	r12, r19
 70a:	10 0d       	add	r17, r0
 70c:	d2 9e       	mul	r13, r18
 70e:	10 0d       	add	r17, r0
 710:	11 24       	eor	r1, r1
 712:	00 2e       	mov	r0, r16
 714:	01 2f       	mov	r16, r17
 716:	00 0c       	add	r0, r0
 718:	00 1f       	adc	r16, r16
 71a:	11 0b       	sbc	r17, r17
 71c:	00 0c       	add	r0, r0
 71e:	00 1f       	adc	r16, r16
 720:	11 1f       	adc	r17, r17
 722:	49 a1       	ldd	r20, Y+33	; 0x21
 724:	5a a1       	ldd	r21, Y+34	; 0x22
 726:	5a 83       	std	Y+2, r21	; 0x02
 728:	49 83       	std	Y+1, r20	; 0x01
 72a:	fa 01       	movw	r30, r20
 72c:	40 81       	ld	r20, Z
 72e:	50 e0       	ldi	r21, 0x00	; 0
 730:	44 9e       	mul	r4, r20
 732:	b0 01       	movw	r22, r0
 734:	45 9e       	mul	r4, r21
 736:	70 0d       	add	r23, r0
 738:	54 9e       	mul	r5, r20
 73a:	70 0d       	add	r23, r0
 73c:	11 24       	eor	r1, r1
 73e:	06 2e       	mov	r0, r22
 740:	67 2f       	mov	r22, r23
 742:	00 0c       	add	r0, r0
 744:	66 1f       	adc	r22, r22
 746:	77 0b       	sbc	r23, r23
 748:	00 0c       	add	r0, r0
 74a:	66 1f       	adc	r22, r22
 74c:	77 1f       	adc	r23, r23
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 74e:	78 01       	movw	r14, r16
 750:	f5 94       	asr	r15
 752:	e7 94       	ror	r14
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 754:	01 70       	andi	r16, 0x01	; 1
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 756:	e0 0e       	add	r14, r16
 758:	5b 01       	movw	r10, r22
 75a:	b5 94       	asr	r11
 75c:	a7 94       	ror	r10
 75e:	ea 18       	sub	r14, r10
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 760:	61 70       	andi	r22, 0x01	; 1
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
 762:	e6 1a       	sub	r14, r22
*/
inline char FIX_MPY(char a, char b)
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
 764:	c4 9e       	mul	r12, r20
 766:	b0 01       	movw	r22, r0
 768:	c5 9e       	mul	r12, r21
 76a:	70 0d       	add	r23, r0
 76c:	d4 9e       	mul	r13, r20
 76e:	70 0d       	add	r23, r0
 770:	11 24       	eor	r1, r1
 772:	ab 01       	movw	r20, r22
 774:	04 2e       	mov	r0, r20
 776:	45 2f       	mov	r20, r21
 778:	00 0c       	add	r0, r0
 77a:	44 1f       	adc	r20, r20
 77c:	55 0b       	sbc	r21, r21
 77e:	00 0c       	add	r0, r0
 780:	44 1f       	adc	r20, r20
 782:	55 1f       	adc	r21, r21
 784:	24 9d       	mul	r18, r4
 786:	b0 01       	movw	r22, r0
 788:	25 9d       	mul	r18, r5
 78a:	70 0d       	add	r23, r0
 78c:	34 9d       	mul	r19, r4
 78e:	70 0d       	add	r23, r0
 790:	11 24       	eor	r1, r1
 792:	9b 01       	movw	r18, r22
 794:	02 2e       	mov	r0, r18
 796:	23 2f       	mov	r18, r19
 798:	00 0c       	add	r0, r0
 79a:	22 1f       	adc	r18, r18
 79c:	33 0b       	sbc	r19, r19
 79e:	00 0c       	add	r0, r0
 7a0:	22 1f       	adc	r18, r18
 7a2:	33 1f       	adc	r19, r19
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 7a4:	ba 01       	movw	r22, r20
 7a6:	75 95       	asr	r23
 7a8:	67 95       	ror	r22
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 7aa:	41 70       	andi	r20, 0x01	; 1
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 7ac:	64 0f       	add	r22, r20
{
  
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 7ae:	52 2f       	mov	r21, r18
 7b0:	51 70       	andi	r21, 0x01	; 1
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 7b2:	65 0f       	add	r22, r21
 7b4:	35 95       	asr	r19
 7b6:	27 95       	ror	r18
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
		    ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
 7b8:	26 0f       	add	r18, r22
 7ba:	5d 01       	movw	r10, r26
		    qr = fr[i];
 7bc:	0c 91       	ld	r16, X
 7be:	bc 01       	movw	r22, r24
		    qi = fi[i];
 7c0:	fc 01       	movw	r30, r24
 7c2:	30 81       	ld	r19, Z
		    if (shift) {
 7c4:	4d 81       	ldd	r20, Y+5	; 0x05
 7c6:	5e 81       	ldd	r21, Y+6	; 0x06
 7c8:	45 2b       	or	r20, r21
 7ca:	11 f0       	breq	.+4      	; 0x7d0 <fix_fft+0x30e>
			  qr >>= 1;
 7cc:	06 95       	lsr	r16
			  qi >>= 1;
 7ce:	36 95       	lsr	r19
		    }
		    fr[j] = qr - tr;
 7d0:	40 2f       	mov	r20, r16
 7d2:	4e 19       	sub	r20, r14
 7d4:	f4 01       	movw	r30, r8
 7d6:	40 83       	st	Z, r20
		    fi[j] = qi - ti;
 7d8:	43 2f       	mov	r20, r19
 7da:	42 1b       	sub	r20, r18
 7dc:	e9 81       	ldd	r30, Y+1	; 0x01
 7de:	fa 81       	ldd	r31, Y+2	; 0x02
 7e0:	40 83       	st	Z, r20
		    fr[i] = qr + tr;
 7e2:	e0 0e       	add	r14, r16
 7e4:	f5 01       	movw	r30, r10
 7e6:	e0 82       	st	Z, r14
		    fi[i] = qi + ti;
 7e8:	23 0f       	add	r18, r19
 7ea:	fb 01       	movw	r30, r22
 7ec:	20 83       	st	Z, r18
		    wi = -wi;
		if (shift) {
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
 7ee:	2f 81       	ldd	r18, Y+7	; 0x07
 7f0:	38 85       	ldd	r19, Y+8	; 0x08
 7f2:	62 0e       	add	r6, r18
 7f4:	73 1e       	adc	r7, r19
 7f6:	4f 8d       	ldd	r20, Y+31	; 0x1f
 7f8:	58 a1       	ldd	r21, Y+32	; 0x20
 7fa:	42 0d       	add	r20, r2
 7fc:	53 1d       	adc	r21, r3
 7fe:	58 a3       	std	Y+32, r21	; 0x20
 800:	4f 8f       	std	Y+31, r20	; 0x1f
 802:	69 a1       	ldd	r22, Y+33	; 0x21
 804:	7a a1       	ldd	r23, Y+34	; 0x22
 806:	62 0d       	add	r22, r2
 808:	73 1d       	adc	r23, r3
 80a:	7a a3       	std	Y+34, r23	; 0x22
 80c:	69 a3       	std	Y+33, r22	; 0x21
 80e:	a2 0d       	add	r26, r2
 810:	b3 1d       	adc	r27, r3
 812:	82 0d       	add	r24, r2
 814:	93 1d       	adc	r25, r3
 816:	2b 81       	ldd	r18, Y+3	; 0x03
 818:	3c 81       	ldd	r19, Y+4	; 0x04
 81a:	62 16       	cp	r6, r18
 81c:	73 06       	cpc	r7, r19
 81e:	0c f4       	brge	.+2      	; 0x822 <fix_fft+0x360>
 820:	6c cf       	rjmp	.-296    	; 0x6fa <fix_fft+0x238>
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
	  for (m=0; m<l; ++m) {
 822:	49 85       	ldd	r20, Y+9	; 0x09
 824:	5a 85       	ldd	r21, Y+10	; 0x0a
 826:	4f 5f       	subi	r20, 0xFF	; 255
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	5a 87       	std	Y+10, r21	; 0x0a
 82c:	49 87       	std	Y+9, r20	; 0x09
 82e:	6b 85       	ldd	r22, Y+11	; 0x0b
 830:	7c 85       	ldd	r23, Y+12	; 0x0c
 832:	46 17       	cp	r20, r22
 834:	57 07       	cpc	r21, r23
 836:	09 f0       	breq	.+2      	; 0x83a <fix_fft+0x378>
 838:	1a cf       	rjmp	.-460    	; 0x66e <fix_fft+0x1ac>
		    fi[j] = qi - ti;
		    fr[i] = qr + tr;
		    fi[i] = qi + ti;
		}
	  }
	  --k;
 83a:	8d 85       	ldd	r24, Y+13	; 0x0d
 83c:	9e 85       	ldd	r25, Y+14	; 0x0e
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	9e 87       	std	Y+14, r25	; 0x0e
 842:	8d 87       	std	Y+13, r24	; 0x0d
	  fi[mr] = ti;
    }

    l = 1;
    k = LOG2_N_WAVE-1;
    while (l < n) {
 844:	ab 81       	ldd	r26, Y+3	; 0x03
 846:	bc 81       	ldd	r27, Y+4	; 0x04
 848:	2f 81       	ldd	r18, Y+7	; 0x07
 84a:	38 85       	ldd	r19, Y+8	; 0x08
 84c:	2a 17       	cp	r18, r26
 84e:	3b 07       	cpc	r19, r27
 850:	4c f4       	brge	.+18     	; 0x864 <fix_fft+0x3a2>
		    fr[i] = qr + tr;
		    fi[i] = qi + ti;
		}
	  }
	  --k;
	  l = istep;
 852:	3c 87       	std	Y+12, r19	; 0x0c
 854:	2b 87       	std	Y+11, r18	; 0x0b
 856:	d0 ce       	rjmp	.-608    	; 0x5f8 <fix_fft+0x136>

    n = 1 << m;

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
	  return -1;
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	05 c0       	rjmp	.+10     	; 0x868 <fix_fft+0x3a6>
	  fi[mr] = ti;
    }

    l = 1;
    k = LOG2_N_WAVE-1;
    while (l < n) {
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <fix_fft+0x3a6>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
	  }
	  --k;
	  l = istep;
    }
    return scale;
}
 868:	a2 96       	adiw	r28, 0x22	; 34
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	9f 90       	pop	r9
 88a:	8f 90       	pop	r8
 88c:	7f 90       	pop	r7
 88e:	6f 90       	pop	r6
 890:	5f 90       	pop	r5
 892:	4f 90       	pop	r4
 894:	3f 90       	pop	r3
 896:	2f 90       	pop	r2
 898:	08 95       	ret

0000089a <fix_fftr>:
  respectively in the original array. The above guarantees
  that fix_fft "sees" consecutive real samples as alternating
  real and imaginary samples in the complex array.
*/
int fix_fftr(char f[], int m, int inverse)
{
 89a:	af 92       	push	r10
 89c:	bf 92       	push	r11
 89e:	cf 92       	push	r12
 8a0:	df 92       	push	r13
 8a2:	ef 92       	push	r14
 8a4:	ff 92       	push	r15
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	8c 01       	movw	r16, r24
 8b0:	7a 01       	movw	r14, r20
    int i, N = 1<<(m-1), scale = 0;
 8b2:	6b 01       	movw	r12, r22
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	c8 1a       	sub	r12, r24
 8b8:	d1 08       	sbc	r13, r1
 8ba:	c1 e0       	ldi	r28, 0x01	; 1
 8bc:	d0 e0       	ldi	r29, 0x00	; 0
 8be:	0c 2c       	mov	r0, r12
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <fix_fftr+0x2c>
 8c2:	cc 0f       	add	r28, r28
 8c4:	dd 1f       	adc	r29, r29
 8c6:	0a 94       	dec	r0
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <fix_fftr+0x28>
    char tt, *fr=f, *fi=&f[N];
 8ca:	58 01       	movw	r10, r16
 8cc:	ac 0e       	add	r10, r28
 8ce:	bd 1e       	adc	r11, r29

    if (inverse)
 8d0:	41 15       	cp	r20, r1
 8d2:	51 05       	cpc	r21, r1
 8d4:	31 f0       	breq	.+12     	; 0x8e2 <fix_fftr+0x48>
	  scale = fix_fft(fi, fr, m-1, inverse);
 8d6:	9a 01       	movw	r18, r20
 8d8:	a6 01       	movw	r20, r12
 8da:	b8 01       	movw	r22, r16
 8dc:	c5 01       	movw	r24, r10
 8de:	f1 dd       	rcall	.-1054   	; 0x4c2 <fix_fft>
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <fix_fftr+0x4c>
  that fix_fft "sees" consecutive real samples as alternating
  real and imaginary samples in the complex array.
*/
int fix_fftr(char f[], int m, int inverse)
{
    int i, N = 1<<(m-1), scale = 0;
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
    char tt, *fr=f, *fi=&f[N];

    if (inverse)
	  scale = fix_fft(fi, fr, m-1, inverse);
    for (i=1; i<N; i+=2) {
 8e6:	c2 30       	cpi	r28, 0x02	; 2
 8e8:	d1 05       	cpc	r29, r1
 8ea:	84 f0       	brlt	.+32     	; 0x90c <fix_fftr+0x72>
 8ec:	d5 01       	movw	r26, r10
 8ee:	f8 01       	movw	r30, r16
 8f0:	31 96       	adiw	r30, 0x01	; 1
 8f2:	21 e0       	ldi	r18, 0x01	; 1
 8f4:	30 e0       	ldi	r19, 0x00	; 0
	  tt = f[N+i-1];
 8f6:	4c 91       	ld	r20, X
	  f[N+i-1] = f[i];
 8f8:	50 81       	ld	r21, Z
 8fa:	5c 93       	st	X, r21
	  f[i] = tt;
 8fc:	40 83       	st	Z, r20
    int i, N = 1<<(m-1), scale = 0;
    char tt, *fr=f, *fi=&f[N];

    if (inverse)
	  scale = fix_fft(fi, fr, m-1, inverse);
    for (i=1; i<N; i+=2) {
 8fe:	2e 5f       	subi	r18, 0xFE	; 254
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	12 96       	adiw	r26, 0x02	; 2
 904:	32 96       	adiw	r30, 0x02	; 2
 906:	2c 17       	cp	r18, r28
 908:	3d 07       	cpc	r19, r29
 90a:	ac f3       	brlt	.-22     	; 0x8f6 <fix_fftr+0x5c>
	  tt = f[N+i-1];
	  f[N+i-1] = f[i];
	  f[i] = tt;
    }
    if (! inverse)
 90c:	ef 28       	or	r14, r15
 90e:	31 f4       	brne	.+12     	; 0x91c <fix_fftr+0x82>
	  scale = fix_fft(fi, fr, m-1, inverse);
 910:	20 e0       	ldi	r18, 0x00	; 0
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	a6 01       	movw	r20, r12
 916:	b8 01       	movw	r22, r16
 918:	c5 01       	movw	r24, r10
 91a:	d3 dd       	rcall	.-1114   	; 0x4c2 <fix_fft>
    return scale;
} 
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	bf 90       	pop	r11
 92e:	af 90       	pop	r10
 930:	08 95       	ret

00000932 <ADC_init>:
#include "header/fix_fft.c"

#include <string.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 932:	ea e7       	ldi	r30, 0x7A	; 122
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	80 6e       	ori	r24, 0xE0	; 224
 93a:	80 83       	st	Z, r24
 93c:	08 95       	ret

0000093e <LCDdefinechar>:
};

// The following function can be found in the lcd_lib.c file found on the accompanying website
// The only change I made was the function names to our pre-built functions (LCD_WriteCommand and LCD_WriteData)
// as they have the same functionality.
void LCDdefinechar(const uint8_t *pc, uint8_t char_code){
 93e:	ef 92       	push	r14
 940:	ff 92       	push	r15
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 94c:	66 0f       	add	r22, r22
 94e:	66 0f       	add	r22, r22
 950:	66 0f       	add	r22, r22
 952:	60 64       	ori	r22, 0x40	; 64
 954:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
 956:	c0 e0       	ldi	r28, 0x00	; 0
 958:	d0 e0       	ldi	r29, 0x00	; 0
 95a:	f8 01       	movw	r30, r16
 95c:	ec 0f       	add	r30, r28
 95e:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
 960:	f4 90       	lpm	r15, Z
		LCD_WriteCommand(a++);
 962:	8c 2f       	mov	r24, r28
 964:	8e 0d       	add	r24, r14
 966:	c2 dc       	rcall	.-1660   	; 0x2ec <LCD_WriteCommand>
		LCD_WriteData(pcc);
 968:	8f 2d       	mov	r24, r15
 96a:	e3 dc       	rcall	.-1594   	; 0x332 <LCD_WriteData>
// as they have the same functionality.
void LCDdefinechar(const uint8_t *pc, uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 96c:	21 96       	adiw	r28, 0x01	; 1
 96e:	c8 30       	cpi	r28, 0x08	; 8
 970:	d1 05       	cpc	r29, r1
 972:	99 f7       	brne	.-26     	; 0x95a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_WriteCommand(a++);
		LCD_WriteData(pcc);
	}
}
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	08 95       	ret

00000982 <main>:


int main(void)
{
 982:	df 92       	push	r13
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	c0 58       	subi	r28, 0x80	; 128
 996:	d1 09       	sbc	r29, r1
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	f8 94       	cli
 99c:	de bf       	out	0x3e, r29	; 62
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;
 9a2:	11 b8       	out	0x01, r1	; 1
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 9a8:	84 b9       	out	0x04, r24	; 4
 9aa:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 9ac:	87 b9       	out	0x07, r24	; 7
 9ae:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 9b0:	8a b9       	out	0x0a, r24	; 10
 9b2:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 9b4:	af dc       	rcall	.-1698   	; 0x314 <LCD_init>
	const unsigned char* note = "note:   fr:  ";
	// The following four calls of LCD_WriteData demonstrate how to call a few random,
	// pre-defined characters stored in the memory of the LCD screen.
	// The total LCD screen memory can be viewed by following the url for CS3710
	LCD_DisplayString(1,note);
 9b6:	64 e0       	ldi	r22, 0x04	; 4
 9b8:	71 e0       	ldi	r23, 0x01	; 1
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	c3 dc       	rcall	.-1658   	; 0x344 <LCD_DisplayString>
	// Note that you can only have up to eight unique characters stored 
	// in LCD memory at any given time.
	// The binary address passed into LCD_WriteData was determined using the chart 
	// on slide 4 found by following the CS 3710 url
	
	LCD_Cursor(7);
 9be:	87 e0       	ldi	r24, 0x07	; 7
 9c0:	a1 dc       	rcall	.-1726   	; 0x304 <LCD_Cursor>
	LCD_WriteData(0b01000001);
 9c2:	81 e4       	ldi	r24, 0x41	; 65
 9c4:	b6 dc       	rcall	.-1684   	; 0x332 <LCD_WriteData>
	
	LCD_Cursor(12);
 9c6:	8c e0       	ldi	r24, 0x0C	; 12
 9c8:	9d dc       	rcall	.-1734   	; 0x304 <LCD_Cursor>
	LCD_WriteData(0b00110100);
 9ca:	84 e3       	ldi	r24, 0x34	; 52
 9cc:	b2 dc       	rcall	.-1692   	; 0x332 <LCD_WriteData>
	LCD_Cursor(13);
 9ce:	8d e0       	ldi	r24, 0x0D	; 13
 9d0:	99 dc       	rcall	.-1742   	; 0x304 <LCD_Cursor>
	LCD_WriteData(0b00110100);
 9d2:	84 e3       	ldi	r24, 0x34	; 52
 9d4:	ae dc       	rcall	.-1700   	; 0x332 <LCD_WriteData>
	LCD_Cursor(14);
 9d6:	8e e0       	ldi	r24, 0x0E	; 14
 9d8:	95 dc       	rcall	.-1750   	; 0x304 <LCD_Cursor>
	LCD_WriteData(0b00110000);
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	aa dc       	rcall	.-1708   	; 0x332 <LCD_WriteData>
   
   LCDdefinechar(filledcircle, 1);
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	82 ef       	ldi	r24, 0xF2	; 242
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	ac df       	rcall	.-168    	; 0x93e <LCDdefinechar>
   LCD_Cursor(24);
 9e6:	88 e1       	ldi	r24, 0x18	; 24
 9e8:	8d dc       	rcall	.-1766   	; 0x304 <LCD_Cursor>
   LCD_WriteData(0b00001001);
 9ea:	89 e0       	ldi	r24, 0x09	; 9
 9ec:	a2 dc       	rcall	.-1724   	; 0x332 <LCD_WriteData>
   
   LCDdefinechar(LINE, 2);
 9ee:	62 e0       	ldi	r22, 0x02	; 2
 9f0:	8a ef       	ldi	r24, 0xFA	; 250
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	a4 df       	rcall	.-184    	; 0x93e <LCDdefinechar>
   LCD_Cursor(17);
 9f6:	81 e1       	ldi	r24, 0x11	; 17
 9f8:	85 dc       	rcall	.-1782   	; 0x304 <LCD_Cursor>
   LCD_WriteData(0b00001010);
 9fa:	8a e0       	ldi	r24, 0x0A	; 10
 9fc:	9a dc       	rcall	.-1740   	; 0x332 <LCD_WriteData>
   
   LCD_Cursor(31);
 9fe:	8f e1       	ldi	r24, 0x1F	; 31
 a00:	81 dc       	rcall	.-1790   	; 0x304 <LCD_Cursor>
   LCD_WriteData(0b00001010);
 a02:	8a e0       	ldi	r24, 0x0A	; 10
 a04:	96 dc       	rcall	.-1748   	; 0x332 <LCD_WriteData>
   //PORTB = 0x0B | PORTB;
   Write7Seg(SS_A);
 a06:	8a e0       	ldi	r24, 0x0A	; 10
 a08:	b7 dc       	rcall	.-1682   	; 0x378 <Write7Seg>
   
   ADC_init();
 a0a:	93 df       	rcall	.-218    	; 0x932 <ADC_init>
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 a0c:	80 e7       	ldi	r24, 0x70	; 112
 a0e:	97 e1       	ldi	r25, 0x17	; 23
 a10:	a0 e0       	ldi	r26, 0x00	; 0
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	80 93 00 01 	sts	0x0100, r24
 a18:	90 93 01 01 	sts	0x0101, r25
 a1c:	a0 93 02 01 	sts	0x0102, r26
 a20:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 a24:	80 93 12 01 	sts	0x0112, r24
 a28:	90 93 13 01 	sts	0x0113, r25
 a2c:	a0 93 14 01 	sts	0x0114, r26
 a30:	b0 93 15 01 	sts	0x0115, r27

   TimerSet(6000);
   TimerOn();
 a34:	e4 db       	rcall	.-2104   	; 0x1fe <TimerOn>
   unsigned char maximum = 0;
   unsigned char location = 0;
   unsigned char A_TONE = 440;
   int v = 0;
   
   while(!TimerFlag)
 a36:	80 91 16 01 	lds	r24, 0x0116
 a3a:	81 11       	cpse	r24, r1
 a3c:	3a c0       	rjmp	.+116    	; 0xab2 <main+0x130>
 a3e:	8e 01       	movw	r16, r28
 a40:	0f 57       	subi	r16, 0x7F	; 127
 a42:	1f 4f       	sbci	r17, 0xFF	; 255
   {
      for (int i = 0; i < value; ++i)
      {
         x[i] = ADC;
 a44:	0f 2e       	mov	r0, r31
 a46:	f8 e7       	ldi	r31, 0x78	; 120
 a48:	ef 2e       	mov	r14, r31
 a4a:	f1 2c       	mov	r15, r1
 a4c:	f0 2d       	mov	r31, r0
      }
	  
	  v = fix_fftr(x, value, inverse);
 a4e:	d1 2c       	mov	r13, r1
 a50:	2d c0       	rjmp	.+90     	; 0xaac <main+0x12a>
   
   while(!TimerFlag)
   {
      for (int i = 0; i < value; ++i)
      {
         x[i] = ADC;
 a52:	d7 01       	movw	r26, r14
 a54:	8d 91       	ld	r24, X+
 a56:	9c 91       	ld	r25, X
 a58:	81 93       	st	Z+, r24
   unsigned char A_TONE = 440;
   int v = 0;
   
   while(!TimerFlag)
   {
      for (int i = 0; i < value; ++i)
 a5a:	e0 17       	cp	r30, r16
 a5c:	f1 07       	cpc	r31, r17
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <main+0xd0>
      {
         x[i] = ADC;
      }
	  
	  v = fix_fftr(x, value, inverse);
 a60:	40 e0       	ldi	r20, 0x00	; 0
 a62:	50 e0       	ldi	r21, 0x00	; 0
 a64:	60 e8       	ldi	r22, 0x80	; 128
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	ce 01       	movw	r24, r28
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	16 df       	rcall	.-468    	; 0x89a <fix_fftr>
 a6e:	fe 01       	movw	r30, r28
 a70:	31 96       	adiw	r30, 0x01	; 1
 a72:	9d 2d       	mov	r25, r13
	  
	  for (int j = 0; j < value; ++j)
	  {
		  if (x[j] > maximum)
 a74:	81 91       	ld	r24, Z+
 a76:	98 17       	cp	r25, r24
 a78:	08 f4       	brcc	.+2      	; 0xa7c <main+0xfa>
 a7a:	98 2f       	mov	r25, r24
         x[i] = ADC;
      }
	  
	  v = fix_fftr(x, value, inverse);
	  
	  for (int j = 0; j < value; ++j)
 a7c:	0e 17       	cp	r16, r30
 a7e:	1f 07       	cpc	r17, r31
 a80:	c9 f7       	brne	.-14     	; 0xa74 <main+0xf2>
			  maximum  = x[j];
			  location = j;
		  }
	  }
	  
	  if (maximum > A_TONE){
 a82:	99 3b       	cpi	r25, 0xB9	; 185
 a84:	38 f0       	brcs	.+14     	; 0xa94 <main+0x112>
		  Write7Seg(SS_B);
 a86:	8b e0       	ldi	r24, 0x0B	; 11
 a88:	77 dc       	rcall	.-1810   	; 0x378 <Write7Seg>
		  LCD_Cursor(7);
 a8a:	87 e0       	ldi	r24, 0x07	; 7
 a8c:	3b dc       	rcall	.-1930   	; 0x304 <LCD_Cursor>
		  LCD_WriteData(0b01000010);
 a8e:	82 e4       	ldi	r24, 0x42	; 66
 a90:	50 dc       	rcall	.-1888   	; 0x332 <LCD_WriteData>
 a92:	06 c0       	rjmp	.+12     	; 0xaa0 <main+0x11e>
	  }
	  else{
		  Write7Seg(SS_A);
 a94:	8a e0       	ldi	r24, 0x0A	; 10
 a96:	70 dc       	rcall	.-1824   	; 0x378 <Write7Seg>
		  LCD_Cursor(7);
 a98:	87 e0       	ldi	r24, 0x07	; 7
 a9a:	34 dc       	rcall	.-1944   	; 0x304 <LCD_Cursor>
		  LCD_WriteData(0b01000001);
 a9c:	81 e4       	ldi	r24, 0x41	; 65
 a9e:	49 dc       	rcall	.-1902   	; 0x332 <LCD_WriteData>
	  }
	  
	  
	  TimerFlag = 0;
 aa0:	d0 92 16 01 	sts	0x0116, r13
   unsigned char maximum = 0;
   unsigned char location = 0;
   unsigned char A_TONE = 440;
   int v = 0;
   
   while(!TimerFlag)
 aa4:	80 91 16 01 	lds	r24, 0x0116
 aa8:	81 11       	cpse	r24, r1
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <main+0x130>
	}
}


int main(void)
{
 aac:	fe 01       	movw	r30, r28
 aae:	31 96       	adiw	r30, 0x01	; 1
 ab0:	d0 cf       	rjmp	.-96     	; 0xa52 <main+0xd0>
	  
	  //LCD_DisplayString(1, maximum);
   }
   
   return 0;
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	c0 58       	subi	r28, 0x80	; 128
 ab8:	df 4f       	sbci	r29, 0xFF	; 255
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	ff 90       	pop	r15
 ace:	ef 90       	pop	r14
 ad0:	df 90       	pop	r13
 ad2:	08 95       	ret

00000ad4 <__tablejump2__>:
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31

00000ad8 <__tablejump__>:
 ad8:	05 90       	lpm	r0, Z+
 ada:	f4 91       	lpm	r31, Z
 adc:	e0 2d       	mov	r30, r0
 ade:	09 94       	ijmp

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
