
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003f2  00000466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007b9  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000177  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000592  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e8  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003e1  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000088f  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
   2:	00 00       	nop
   4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
   6:	00 00       	nop
   8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
   a:	00 00       	nop
   c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
   e:	00 00       	nop
  10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
  12:	00 00       	nop
  14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
  16:	00 00       	nop
  18:	89 c0       	rjmp	.+274    	; 0x12c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
  1e:	00 00       	nop
  20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
  22:	00 00       	nop
  24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
  26:	00 00       	nop
  28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
  2e:	00 00       	nop
  30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
  32:	00 00       	nop
  34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
  36:	00 00       	nop
  38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
  3e:	00 00       	nop
  40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
  42:	00 00       	nop
  44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
  46:	00 00       	nop
  48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
  4e:	00 00       	nop
  50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
  52:	00 00       	nop
  54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
  56:	00 00       	nop
  58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
  5e:	00 00       	nop
  60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
  62:	00 00       	nop
  64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
  66:	00 00       	nop
  68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
  6e:	00 00       	nop
  70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
  72:	00 00       	nop
  74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
  76:	00 00       	nop
  78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
  7e:	00 00       	nop
  80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
  82:	00 00       	nop
  84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
  86:	00 00       	nop
  88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fd 00       	.word	0x00fd	; ????
  8e:	00 01       	movw	r0, r0
  90:	03 01       	movw	r0, r6
  92:	06 01       	movw	r0, r12
  94:	09 01       	movw	r0, r18
  96:	0c 01       	movw	r0, r24
  98:	0f 01       	movw	r0, r30
  9a:	12 01       	movw	r2, r4
  9c:	15 01       	movw	r2, r10
  9e:	18 01       	movw	r2, r16
  a0:	1b 01       	movw	r2, r22
  a2:	1e 01       	movw	r2, r28
  a4:	21 01       	movw	r4, r2
  a6:	24 01       	movw	r4, r8
  a8:	27 01       	movw	r4, r14
  aa:	2a 01       	movw	r4, r20
  ac:	2d 01       	movw	r4, r26
  ae:	30 01       	movw	r6, r0
  b0:	33 01       	movw	r6, r6
  b2:	36 01       	movw	r6, r12
  b4:	39 01       	movw	r6, r18
  b6:	3c 01       	movw	r6, r24
  b8:	3f 01       	movw	r6, r30
  ba:	42 01       	movw	r8, r4
  bc:	45 01       	movw	r8, r10
  be:	48 01       	movw	r8, r16
  c0:	4b 01       	movw	r8, r22
  c2:	4e 01       	movw	r8, r28
  c4:	51 01       	movw	r10, r2
  c6:	54 01       	movw	r10, r8
  c8:	57 01       	movw	r10, r14
  ca:	5a 01       	movw	r10, r20
  cc:	5d 01       	movw	r10, r26
  ce:	60 01       	movw	r12, r0
  d0:	63 01       	movw	r12, r6
  d2:	66 01       	movw	r12, r12
  d4:	69 01       	movw	r12, r18
  d6:	6c 01       	movw	r12, r24
  d8:	6f 01       	movw	r12, r30
  da:	72 01       	movw	r14, r4
  dc:	75 01       	movw	r14, r10
  de:	78 01       	movw	r14, r16
  e0:	7b 01       	movw	r14, r22
  e2:	7e 01       	movw	r14, r28
  e4:	81 01       	movw	r16, r2
  e6:	84 01       	movw	r16, r8
  e8:	87 01       	movw	r16, r14
  ea:	8a 01       	movw	r16, r20
  ec:	8d 01       	movw	r16, r26
  ee:	90 01       	movw	r18, r0
  f0:	93 01       	movw	r18, r6

000000f2 <__trampolines_end>:
  f2:	04 04       	cpc	r0, r4
  f4:	0e 1f       	adc	r16, r30
  f6:	1f 1f       	adc	r17, r31
  f8:	0e 04       	cpc	r0, r14

000000fa <LINE>:
  fa:	04 04 04 04 04 04 04 04                             ........

00000102 <__ctors_end>:
 102:	11 24       	eor	r1, r1
 104:	1f be       	out	0x3f, r1	; 63
 106:	cf ef       	ldi	r28, 0xFF	; 255
 108:	d0 e4       	ldi	r29, 0x40	; 64
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b1 e0       	ldi	r27, 0x01	; 1
 114:	e2 ef       	ldi	r30, 0xF2	; 242
 116:	f3 e0       	ldi	r31, 0x03	; 3
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	0b bf       	out	0x3b, r16	; 59
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	ae 30       	cpi	r26, 0x0E	; 14
 124:	b1 07       	cpc	r27, r17
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>
 128:	26 d1       	rcall	.+588    	; 0x376 <main>
 12a:	61 c1       	rjmp	.+706    	; 0x3ee <_exit>

0000012c <__bad_interrupt>:
 12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	9c f4       	brge	.+38     	; 0x15a <delay_ms+0x2c>
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 138:	77 e0       	ldi	r23, 0x07	; 7
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	0b c0       	rjmp	.+22     	; 0x154 <delay_ms+0x26>
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  {
   asm("nop");
 13e:	00 00       	nop
 140:	21 50       	subi	r18, 0x01	; 1
 142:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 144:	21 15       	cp	r18, r1
 146:	31 05       	cpc	r19, r1
 148:	d1 f7       	brne	.-12     	; 0x13e <delay_ms+0x10>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	48 17       	cp	r20, r24
 150:	59 07       	cpc	r21, r25
 152:	19 f0       	breq	.+6      	; 0x15a <delay_ms+0x2c>
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 154:	27 2f       	mov	r18, r23
 156:	36 2f       	mov	r19, r22
 158:	f2 cf       	rjmp	.-28     	; 0x13e <delay_ms+0x10>
 15a:	08 95       	ret

0000015c <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 15c:	28 98       	cbi	0x05, 0	; 5
   DATA_BUS = Command;
 15e:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 160:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 162:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 164:	29 98       	cbi	0x05, 1	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	e1 cf       	rjmp	.-62     	; 0x12e <delay_ms>
 16c:	08 95       	ret

0000016e <LCD_ClearScreen>:
#define E 1		// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	f5 cf       	rjmp	.-22     	; 0x15c <LCD_WriteCommand>
 172:	08 95       	ret

00000174 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 174:	81 31       	cpi	r24, 0x11	; 17
 176:	18 f4       	brcc	.+6      	; 0x17e <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 178:	81 58       	subi	r24, 0x81	; 129
 17a:	f0 cf       	rjmp	.-32     	; 0x15c <LCD_WriteCommand>
 17c:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 17e:	81 55       	subi	r24, 0x51	; 81
 180:	ed cf       	rjmp	.-38     	; 0x15c <LCD_WriteCommand>
 182:	08 95       	ret

00000184 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	d2 df       	rcall	.-92     	; 0x12e <delay_ms>
	LCD_WriteCommand(0x38);
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	e7 df       	rcall	.-50     	; 0x15c <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	e5 df       	rcall	.-54     	; 0x15c <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	e3 df       	rcall	.-58     	; 0x15c <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	e1 df       	rcall	.-62     	; 0x15c <LCD_WriteCommand>
	delay_ms(10);						 
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	c7 cf       	rjmp	.-114    	; 0x12e <delay_ms>
 1a0:	08 95       	ret

000001a2 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 1a2:	28 9a       	sbi	0x05, 0	; 5
   DATA_BUS = Data;
 1a4:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 1a6:	29 9a       	sbi	0x05, 1	; 5
   asm("nop");
 1a8:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 1aa:	29 98       	cbi	0x05, 1	; 5
   delay_ms(1);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	be cf       	rjmp	.-132    	; 0x12e <delay_ms>
 1b2:	08 95       	ret

000001b4 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	18 2f       	mov	r17, r24
 1be:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 1c0:	d6 df       	rcall	.-84     	; 0x16e <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 1c2:	88 81       	ld	r24, Y
 1c4:	88 23       	and	r24, r24
 1c6:	59 f0       	breq	.+22     	; 0x1de <LCD_DisplayString+0x2a>
      LCD_Cursor(c++);
 1c8:	01 e0       	ldi	r16, 0x01	; 1
 1ca:	01 0f       	add	r16, r17
 1cc:	81 2f       	mov	r24, r17
 1ce:	d2 df       	rcall	.-92     	; 0x174 <LCD_Cursor>
      LCD_WriteData(*string++);
 1d0:	89 91       	ld	r24, Y+
 1d2:	e7 df       	rcall	.-50     	; 0x1a2 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 1d4:	88 81       	ld	r24, Y
 1d6:	88 23       	and	r24, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <LCD_DisplayString+0x2a>
      LCD_Cursor(c++);
 1da:	10 2f       	mov	r17, r16
 1dc:	f5 cf       	rjmp	.-22     	; 0x1c8 <LCD_DisplayString+0x14>
      LCD_WriteData(*string++);
   }
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <Write7Seg>:
	// Turns on all segments
	// *sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
	//					(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) |	(1<<sevenSeg_DP);	
	
	// Seven Seg character defintions
	switch (c) {
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	83 33       	cpi	r24, 0x33	; 51
 1ec:	91 05       	cpc	r25, r1
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <Write7Seg+0xa>
 1f0:	9d c0       	rjmp	.+314    	; 0x32c <Write7Seg+0x144>
 1f2:	fc 01       	movw	r30, r24
 1f4:	ea 5b       	subi	r30, 0xBA	; 186
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	f4 c0       	rjmp	.+488    	; 0x3e2 <__tablejump2__>
		case SS_0:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 1fa:	8e e7       	ldi	r24, 0x7E	; 126
 1fc:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F)	;
			break;
 1fe:	08 95       	ret
		case SS_1:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) ;
 200:	82 e1       	ldi	r24, 0x12	; 18
 202:	88 b9       	out	0x08, r24	; 8
			break;
 204:	08 95       	ret
		case SS_2:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_D) |	
 206:	8c eb       	ldi	r24, 0xBC	; 188
 208:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 20a:	08 95       	ret
		case SS_3:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 20c:	86 eb       	ldi	r24, 0xB6	; 182
 20e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 210:	08 95       	ret
		case SS_4:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C)	|	
 212:	82 ed       	ldi	r24, 0xD2	; 210
 214:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 216:	08 95       	ret
		case SS_5:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 218:	86 ee       	ldi	r24, 0xE6	; 230
 21a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 21c:	08 95       	ret
		case SS_6:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 21e:	8e ee       	ldi	r24, 0xEE	; 238
 220:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 222:	08 95       	ret
		case SS_7:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) ;
 224:	82 e3       	ldi	r24, 0x32	; 50
 226:	88 b9       	out	0x08, r24	; 8
			break;
 228:	08 95       	ret
		case SS_8:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 22a:	8e ef       	ldi	r24, 0xFE	; 254
 22c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 22e:	08 95       	ret
		case SS_9:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 230:	86 ef       	ldi	r24, 0xF6	; 246
 232:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 234:	08 95       	ret
		case SS_A:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 236:	8a ef       	ldi	r24, 0xFA	; 250
 238:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 23a:	08 95       	ret
		case SS_B:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 23c:	8e ec       	ldi	r24, 0xCE	; 206
 23e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 240:	08 95       	ret
		case SS_C:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 242:	8c e6       	ldi	r24, 0x6C	; 108
 244:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 246:	08 95       	ret
		case SS_D:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 248:	8e e9       	ldi	r24, 0x9E	; 158
 24a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 24c:	08 95       	ret
		case SS_E:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 24e:	8c ee       	ldi	r24, 0xEC	; 236
 250:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 252:	08 95       	ret
		case SS_F:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 254:	88 ee       	ldi	r24, 0xE8	; 232
 256:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 258:	08 95       	ret
		case SS_DP:
			*sevenSeg_Port =	(1<<sevenSeg_DP);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	88 b9       	out	0x08, r24	; 8
			break;
 25e:	08 95       	ret
		case SS_G:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 260:	8e e6       	ldi	r24, 0x6E	; 110
 262:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 264:	08 95       	ret
		case SS_H:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 266:	8a ed       	ldi	r24, 0xDA	; 218
 268:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 26a:	08 95       	ret
		case SS_h:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 26c:	8a ec       	ldi	r24, 0xCA	; 202
 26e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 270:	08 95       	ret
		case SS_I:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
 272:	88 e4       	ldi	r24, 0x48	; 72
 274:	88 b9       	out	0x08, r24	; 8
			break;
 276:	08 95       	ret
		case SS_J:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 278:	8e e1       	ldi	r24, 0x1E	; 30
 27a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 27c:	08 95       	ret
		case SS_L:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 27e:	8c e4       	ldi	r24, 0x4C	; 76
 280:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 282:	08 95       	ret
		case SS_m:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_C) |
 284:	8a ea       	ldi	r24, 0xAA	; 170
 286:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 288:	08 95       	ret
		case SS_N:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 28a:	8a e7       	ldi	r24, 0x7A	; 122
 28c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 28e:	08 95       	ret
		case SS_n:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 290:	8a e8       	ldi	r24, 0x8A	; 138
 292:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 294:	08 95       	ret
		case SS_P:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |
 296:	88 ef       	ldi	r24, 0xF8	; 248
 298:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 29a:	08 95       	ret
		case SS_R:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 29c:	88 e6       	ldi	r24, 0x68	; 104
 29e:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 2a0:	08 95       	ret
		case SS_r:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
 2a2:	88 e8       	ldi	r24, 0x88	; 136
 2a4:	88 b9       	out	0x08, r24	; 8
			break;
 2a6:	08 95       	ret
		case SS_t:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 2a8:	8c ec       	ldi	r24, 0xCC	; 204
 2aa:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 2ac:	08 95       	ret
		case SS_U:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 2ae:	8e e5       	ldi	r24, 0x5E	; 94
 2b0:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 2b2:	08 95       	ret
		case SS_u:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 2b8:	08 95       	ret
		case SS_V:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_D) |
 2ba:	84 e5       	ldi	r24, 0x54	; 84
 2bc:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;
 2be:	08 95       	ret
		case SS_v:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 2c4:	08 95       	ret
		case SS_X:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) |
 2c6:	84 ea       	ldi	r24, 0xA4	; 164
 2c8:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 2ca:	08 95       	ret
		case SS_Y:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 2cc:	86 ed       	ldi	r24, 0xD6	; 214
 2ce:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 2d0:	08 95       	ret
		case SS_Z:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 2d2:	88 e9       	ldi	r24, 0x98	; 152
 2d4:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 2d6:	08 95       	ret
		case SS_lambda:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 2d8:	8a eb       	ldi	r24, 0xBA	; 186
 2da:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;
 2dc:	08 95       	ret
		case SS_char1:
			*sevenSeg_Port =	(1<<sevenSeg_E)	|	(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
 2de:	88 ec       	ldi	r24, 0xC8	; 200
 2e0:	88 b9       	out	0x08, r24	; 8
			break;
 2e2:	08 95       	ret
		case SS_char2:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 2e4:	82 e9       	ldi	r24, 0x92	; 146
 2e6:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;
 2e8:	08 95       	ret
		case SS_char3:
			*sevenSeg_Port =	(1<<sevenSeg_B) |	(1<<sevenSeg_C) |
 2ea:	8a e5       	ldi	r24, 0x5A	; 90
 2ec:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_F) ;
			break;
 2ee:	08 95       	ret
		case SS_char4:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 2f0:	80 e5       	ldi	r24, 0x50	; 80
 2f2:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;
 2f4:	08 95       	ret
		case SS_char5:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;
			break;
 2fa:	08 95       	ret
		case SS_char6:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_D) ;
 2fc:	84 e2       	ldi	r24, 0x24	; 36
 2fe:	88 b9       	out	0x08, r24	; 8
			break;
 300:	08 95       	ret
		case SS_char7:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 302:	82 ec       	ldi	r24, 0xC2	; 194
 304:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;
 306:	08 95       	ret
		case SS_char8:
			*sevenSeg_Port =	(1<<sevenSeg_C) |
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) ;
			break;	
 30c:	08 95       	ret
		case SS_char9:
			*sevenSeg_Port =	(1<<sevenSeg_B) |
 30e:	88 e1       	ldi	r24, 0x18	; 24
 310:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	;	
			break;	
 312:	08 95       	ret
		case SS_char10:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|
 314:	80 ee       	ldi	r24, 0xE0	; 224
 316:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_F) |	(1<<sevenSeg_G) ;
			break;	
 318:	08 95       	ret
		case SS_char11:
			*sevenSeg_Port =	(1<<sevenSeg_D) |
 31a:	8c e8       	ldi	r24, 0x8C	; 140
 31c:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_E)	|	(1<<sevenSeg_G) ;
			break;	
 31e:	08 95       	ret
		case SS_char12:
			*sevenSeg_Port =	(1<<sevenSeg_C) |	(1<<sevenSeg_D) |
 320:	86 e8       	ldi	r24, 0x86	; 134
 322:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;	
 324:	08 95       	ret
		case SS_char13:
			*sevenSeg_Port =	(1<<sevenSeg_A)	|	(1<<sevenSeg_B) |	
 326:	80 eb       	ldi	r24, 0xB0	; 176
 328:	88 b9       	out	0x08, r24	; 8
								(1<<sevenSeg_G) ;
			break;	
 32a:	08 95       	ret
	
		default:
			*sevenSeg_Port =	(1<<sevenSeg_G) ;
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	88 b9       	out	0x08, r24	; 8
 330:	08 95       	ret

00000332 <LCDdefinechar>:


// The following function can be found in the lcd_lib.c file found on the accompanying website
// The only change I made was the function names to our pre-built functions (LCD_WriteCommand and LCD_WriteData)
// as they have the same functionality.
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 340:	66 0f       	add	r22, r22
 342:	66 0f       	add	r22, r22
 344:	66 0f       	add	r22, r22
 346:	60 64       	ori	r22, 0x40	; 64
 348:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	f8 01       	movw	r30, r16
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
 354:	f4 90       	lpm	r15, Z
		LCD_WriteCommand(a++);
 356:	8c 2f       	mov	r24, r28
 358:	8e 0d       	add	r24, r14
 35a:	00 df       	rcall	.-512    	; 0x15c <LCD_WriteCommand>
		LCD_WriteData(pcc);
 35c:	8f 2d       	mov	r24, r15
 35e:	21 df       	rcall	.-446    	; 0x1a2 <LCD_WriteData>
// as they have the same functionality.
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	c8 30       	cpi	r28, 0x08	; 8
 364:	d1 05       	cpc	r29, r1
 366:	99 f7       	brne	.-26     	; 0x34e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_WriteCommand(a++);
		LCD_WriteData(pcc);
	}
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <main>:

int main(void)
{
	DDRB = 0xFF; // LCD is hooked up using PORTD and PORTA, can easily be changed to accommodate your wiring.
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 37a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF;
 37c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 37e:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF;
 380:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 382:	18 b8       	out	0x08, r1	; 8
	
	LCD_init();
 384:	ff de       	rcall	.-514    	; 0x184 <LCD_init>
	const char* note = "note:   fr:  ";
	// The following four calls of LCD_WriteData demonstrate how to call a few random,
	// pre-defined characters stored in the memory of the LCD screen.
	// The total LCD screen memory can be viewed by following the url for CS3710
	LCD_DisplayString(1,note);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	13 df       	rcall	.-474    	; 0x1b4 <LCD_DisplayString>
	// in LCD memory at any given time.
	// The binary address passed into LCD_WriteData was determined using the chart 
	// on slide 4 found by following the CS 3710 url
	
	//LCDdefinechar(dungeon_key,0);
	LCD_Cursor(7);
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	f1 de       	rcall	.-542    	; 0x174 <LCD_Cursor>
	LCD_WriteData(0b01000001);
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	06 df       	rcall	.-500    	; 0x1a2 <LCD_WriteData>
	
	LCD_Cursor(12);
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	ed de       	rcall	.-550    	; 0x174 <LCD_Cursor>
	LCD_WriteData(0b00110100);
 39a:	84 e3       	ldi	r24, 0x34	; 52
 39c:	02 df       	rcall	.-508    	; 0x1a2 <LCD_WriteData>
	LCD_Cursor(13);
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	e9 de       	rcall	.-558    	; 0x174 <LCD_Cursor>
	LCD_WriteData(0b00110100);
 3a2:	84 e3       	ldi	r24, 0x34	; 52
 3a4:	fe de       	rcall	.-516    	; 0x1a2 <LCD_WriteData>
	LCD_Cursor(14);
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	e5 de       	rcall	.-566    	; 0x174 <LCD_Cursor>
	LCD_WriteData(0b00110000);
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	fa de       	rcall	.-524    	; 0x1a2 <LCD_WriteData>
   
   //LCDdefinechar(pixel_man,1);
   //LCD_Cursor(9);
   //LCD_WriteData(0b00001001);
   
   LCDdefinechar(filledcircle, 1);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	82 ef       	ldi	r24, 0xF2	; 242
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	be df       	rcall	.-132    	; 0x332 <LCDdefinechar>
   LCD_Cursor(24);
 3b6:	88 e1       	ldi	r24, 0x18	; 24
 3b8:	dd de       	rcall	.-582    	; 0x174 <LCD_Cursor>
   LCD_WriteData(0b00001001);
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	f2 de       	rcall	.-540    	; 0x1a2 <LCD_WriteData>
   
   LCDdefinechar(LINE, 2);
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	8a ef       	ldi	r24, 0xFA	; 250
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	b6 df       	rcall	.-148    	; 0x332 <LCDdefinechar>
   LCD_Cursor(17);
 3c6:	81 e1       	ldi	r24, 0x11	; 17
 3c8:	d5 de       	rcall	.-598    	; 0x174 <LCD_Cursor>
   LCD_WriteData(0b00001010);
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	ea de       	rcall	.-556    	; 0x1a2 <LCD_WriteData>
   
   
   
   LCD_Cursor(31);
 3ce:	8f e1       	ldi	r24, 0x1F	; 31
 3d0:	d1 de       	rcall	.-606    	; 0x174 <LCD_Cursor>
   LCD_WriteData(0b00001010);
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	e6 de       	rcall	.-564    	; 0x1a2 <LCD_WriteData>
   //LCD_WriteData(0b00001110);
   //LCD_Cursor(31);
   //LCD_WriteData(0b00001111);
   
   
  PORTB = 0x0B | PORTB;
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	8b 60       	ori	r24, 0x0B	; 11
 3da:	85 b9       	out	0x05, r24	; 5
  Write7Seg(SS_A);
 3dc:	8a e0       	ldi	r24, 0x0A	; 10
 3de:	04 df       	rcall	.-504    	; 0x1e8 <Write7Seg>
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <main+0x6a>

000003e2 <__tablejump2__>:
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31

000003e6 <__tablejump__>:
 3e6:	05 90       	lpm	r0, Z+
 3e8:	f4 91       	lpm	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	09 94       	ijmp

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
